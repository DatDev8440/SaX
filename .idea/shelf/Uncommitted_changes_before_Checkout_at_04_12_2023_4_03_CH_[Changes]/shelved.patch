Index: src/main/java/com/sax/views/QuenMatKhauDialog.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.sax.views;\r\n\r\nimport com.formdev.flatlaf.FlatClientProperties;\r\nimport com.microsoft.sqlserver.jdbc.SQLServerException;\r\nimport com.sax.dtos.AccountDTO;\r\nimport com.sax.services.IAccountService;\r\nimport com.sax.services.impl.AccountService;\r\nimport com.sax.utils.*;\r\nimport com.sax.views.components.Loading;\r\n\r\nimport javax.mail.MessagingException;\r\nimport javax.mail.SendFailedException;\r\nimport javax.swing.*;\r\nimport java.awt.*;\r\nimport java.awt.event.ActionEvent;\r\nimport java.awt.event.ActionListener;\r\nimport java.util.concurrent.ExecutorService;\r\nimport java.util.concurrent.Executors;\r\nimport java.util.regex.Matcher;\r\nimport java.util.regex.Pattern;\r\n\r\npublic class QuenMatKhauDialog extends JDialog {\r\n    private JPanel contentPane;\r\n    private JTextField txtOTP;\r\n    private JPanel otp;\r\n    private JTextField txtEmail;\r\n    private JPanel email;\r\n    private JPanel cardPane;\r\n    private JButton btnSendOTP;\r\n    private JButton btnSubmit;\r\n    private JPasswordField txtPass;\r\n    private JPasswordField txtPassA;\r\n    private IAccountService accountService = ContextUtils.getBean(AccountService.class);\r\n    private AccountDTO accountDTO;\r\n    private Timer timer;\r\n    private int secondsRemaining;\r\n    private ExecutorService executorService = Executors.newSingleThreadExecutor();\r\n\r\n\r\n    public QuenMatKhauDialog() {\r\n        initComponent();\r\n        timer = new Timer(60000, new ActionListener() {\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n                enableSendButton();\r\n            }\r\n        });\r\n    }\r\n\r\n    private void initComponent() {\r\n        setContentPane(contentPane);\r\n        setModal(true);\r\n        pack();\r\n        setLocationRelativeTo(null);\r\n        btnSendOTP.setCursor(new Cursor(Cursor.HAND_CURSOR));\r\n        btnSubmit.setCursor(new Cursor(Cursor.HAND_CURSOR));\r\n        btnSubmit.addActionListener(e -> changePass());\r\n        btnSendOTP.addActionListener(new ActionListener() {\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n                // Kiểm tra xem đã hết thời gian chưa\r\n                if (!timer.isRunning()) {\r\n                    // Gửi OTP và bắt đầu đếm ngược\r\n                    accountDTO = sendOtp();\r\n                    System.out.println(Session.otp);\r\n                    if (accountDTO != null) startTimer();\r\n                } else {\r\n                    // Thông báo người dùng chờ cho đến khi hết thời gian\r\n                    JOptionPane.showMessageDialog(null, \"Vui lòng chờ đến khi hết thời gian trước khi gửi lại OTP.\");\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    private void startTimer() {\r\n        // Disable nút để ngăn chặn việc nhấn liên tục trong thời gian chờ\r\n        disableSendButton();\r\n        secondsRemaining = 60;\r\n        timer.start();\r\n        new Thread(new Runnable() {\r\n            @Override\r\n            public void run() {\r\n                while (secondsRemaining > 0) {\r\n                    try {\r\n                        btnSendOTP.setText(String.valueOf(secondsRemaining));\r\n                        // Đợi 1 giây\r\n                        Thread.sleep(1000);\r\n                        secondsRemaining--;\r\n                    } catch (InterruptedException e) {\r\n                        e.printStackTrace();\r\n                    }\r\n                }\r\n                timer.stop();\r\n                Session.otp = null;\r\n                btnSendOTP.setText(\"Gửi otp\");\r\n            }\r\n        }).start();\r\n    }\r\n\r\n    private void enableSendButton() {\r\n        btnSendOTP.setEnabled(true);\r\n    }\r\n\r\n    private void disableSendButton() {\r\n        btnSendOTP.setEnabled(false);\r\n    }\r\n\r\n    private void changePass() {\r\n        String pass = new String(txtPassA.getPassword());\r\n        String rePass = new String(txtPass.getPassword());\r\n        String otp = txtOTP.getText();\r\n        if (!pass.trim().isEmpty() || !rePass.trim().isEmpty() || !otp.trim().isEmpty() || !txtEmail.getText().isEmpty()) {\r\n            if (accountDTO != null) {\r\n                if (pass.equals(rePass)) {\r\n                    if (otp.equals(Session.otp)) {\r\n                        accountDTO.setPassword(rePass);\r\n                        accountService.updateUsernamePassword(accountDTO);\r\n                        MsgBox.alert(null, \"Đổi mật khẩu thành công\");\r\n                        this.dispose();\r\n                    } else MsgBox.alert(null, \"Sai otp\");\r\n                } else MsgBox.alert(null, \"Không trùng mật khẩu\");\r\n            } else MsgBox.alert(null, \"Vui lòng gửi otp\");\r\n        } else MsgBox.alert(null, \"Vui lòng nhập đủ thông tin\");\r\n    }\r\n\r\n    private AccountDTO sendOtp() {\r\n        Loading loading = new Loading();\r\n        executorService.submit(() -> {\r\n            try {\r\n                if (!txtEmail.getText().trim().isEmpty()) {\r\n                    if (Session.isValidEmail(txtEmail.getText())) {\r\n                        accountDTO = accountService.getByEmail(txtEmail.getText());\r\n                    } else {\r\n                        accountDTO = accountService.getByUsername(txtEmail.getText());\r\n                    }\r\n                    MailService.sendEmail(accountDTO.getEmail());\r\n                    loading.dispose();\r\n                    MsgBox.alert(null, \"Mail đã được gửi tới email :\" + accountDTO.getEmail());\r\n                }\r\n                else{\r\n                    loading.dispose();\r\n                    MsgBox.alert(null, \"Vui lòng nhập email\");\r\n                }\r\n            }\r\n            catch (IllegalArgumentException e) {\r\n                loading.dispose();\r\n                accountDTO = null;\r\n                MsgBox.alert(null, \"Không tồn tài khoản\");\r\n            }\r\n            catch (MessagingException e) {\r\n                loading.dispose();\r\n                MsgBox.alert(null, \"Mail ko hợp lệ\");\r\n            }\r\n        });\r\n        loading.setVisible(true);\r\n        return accountDTO;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/sax/views/QuenMatKhauDialog.java b/src/main/java/com/sax/views/QuenMatKhauDialog.java
--- a/src/main/java/com/sax/views/QuenMatKhauDialog.java	(revision 6696c8ca300ba9f99f4c552aea9a09176574c338)
+++ b/src/main/java/com/sax/views/QuenMatKhauDialog.java	(date 1701680570690)
@@ -58,14 +58,12 @@
         btnSendOTP.addActionListener(new ActionListener() {
             @Override
             public void actionPerformed(ActionEvent e) {
-                // Kiểm tra xem đã hết thời gian chưa
                 if (!timer.isRunning()) {
                     // Gửi OTP và bắt đầu đếm ngược
                     accountDTO = sendOtp();
                     System.out.println(Session.otp);
                     if (accountDTO != null) startTimer();
                 } else {
-                    // Thông báo người dùng chờ cho đến khi hết thời gian
                     JOptionPane.showMessageDialog(null, "Vui lòng chờ đến khi hết thời gian trước khi gửi lại OTP.");
                 }
             }
@@ -73,7 +71,6 @@
     }
 
     private void startTimer() {
-        // Disable nút để ngăn chặn việc nhấn liên tục trong thời gian chờ
         disableSendButton();
         secondsRemaining = 60;
         timer.start();
